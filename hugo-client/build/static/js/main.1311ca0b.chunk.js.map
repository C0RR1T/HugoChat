{"version":3,"sources":["components/Chat.tsx","components/Members.tsx","components/App.tsx","index.tsx"],"names":["Message","props","className","style","own","backgroundColor","author","content","InputField","useState","setContent","onKeyPress","event","key","submitHandler","onChange","target","value","type","placeholder","Chat","messageRef","useRef","useEffect","ref","current","getBoundingClientRect","bottom","window","innerHeight","scrollIntoView","behavior","messages","map","msg","sendHandler","Member","name","SelfMember","Members","members","n","App","state","onlineMembers","this","setState","setInterval","push","changeMembers","changeMessages","s","console","log","selfName","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAqCMA,EAAU,SAACC,GAAD,OACZ,sBAAKC,UAAU,UACVC,MAAQF,EAAMG,IAAO,CAACC,gBAAiB,WAAa,GADzD,UAEI,qBAAKH,UAAU,SAAf,SAAyBD,EAAMK,SAC/B,qBAAKJ,UAAU,UAAf,SAA0BD,EAAMM,cAUlCC,EAAa,SAACP,GAA4B,IAAD,EACbQ,mBAAS,IADI,mBACpCF,EADoC,KAC3BG,EAD2B,KAG3C,OACI,uBAAOC,WAAY,SAAAC,GACG,UAAdA,EAAMC,MACNZ,EAAMa,cAAcP,GACpBG,EAAW,MAGZK,SAAU,SAAAH,GAAK,OAAIF,EAAWE,EAAMI,OAAOC,QAC3CC,KAAK,OACLhB,UAAU,cACVe,MAAOV,EACPY,YAAY,0BAKZC,EA9DF,SAACnB,GACV,IAAMoB,EAAaC,iBAAuB,MAQ1C,OAPAC,qBAAU,WACN,IAAMC,EAAMH,EAAWI,QACnBD,GAAOA,EAAIE,wBAAwBC,QAAUC,OAAOC,YAAc,KAClEL,EAAIM,eAAe,CAACC,SAAU,cAKlC,gCACI,sBAAK7B,UAAU,WAAf,UACKD,EAAM+B,SAASC,KAAI,SAAAC,GAAG,OAAI,cAAC,EAAD,CAAS5B,OAAQ4B,EAAI5B,OAAQC,QAAS2B,EAAI3B,QAASH,IAAK8B,EAAI9B,SACvF,qBAAKoB,IAAKH,OAEd,cAAC,EAAD,CAAYP,cAAe,SAAAP,GACvBN,EAAMkC,YAAY5B,UCL5B6B,EAAS,SAACnC,GAAD,OACX,qBAAKC,UAAU,SAAf,SACI,qBAAKA,UAAU,OAAf,SAAuBD,EAAMoC,UAG/BC,EAAa,SAACrC,GAAD,OACf,qBAAKC,UAAU,SAASC,MAAO,CAACE,gBAAiB,WAAjD,SACI,qBAAKH,UAAU,OAAf,SACKD,EAAMoC,UAIJE,EA1BC,SAACtC,GACb,OACI,sBAAKC,UAAU,UAAf,UACI,cAAC,EAAD,CAAYmC,KAAK,WAChBpC,EAAMuC,QAAQP,KAAI,SAAAQ,GAAC,OAAI,cAAC,EAAD,CAAQJ,KAAMI,WCJ9CD,EAAU,CAAC,OAAQ,qBAAsB,OAAQ,SAAU,WAAY,OAAQ,QAAS,WAAY,SAAU,gBAAc,mBAC5HR,EAAW,CAAC,CAAC1B,OAAQ,qBAAsBC,QAAS,gBACpD,CAACD,OAAQ,OAAQC,QAAS,gBAAiB,CAACD,OAAQ,SAAUC,QAAS,QAASH,KAAK,GACrF,CACIE,OAAQ,OAAQC,QAAS,0KA0DlBmC,E,kDA3CX,WAAYzC,GAAY,IAAD,8BACnB,cAAMA,IACD0C,MAAQ,CACTN,KAAM,SACNO,cAAeJ,EACfR,SAAUA,GALK,E,iDASvB,SAAcQ,GACVK,KAAKC,SAAS,CACVF,cAAeJ,M,4BAIvB,SAAeR,GACXa,KAAKC,SAAS,CACVd,SAAUA,M,+BAIlB,WAAqB,IAAD,OAChBe,aAAY,WACRP,EAAQQ,KAAK,QACb,EAAKC,cAAcT,KACpB,KACHO,aAAY,WACRf,EAASgB,KAAK,CAAC1C,OAAQ,WAAYC,QAAS,SAC5C,EAAK2C,eAAelB,KACrB,O,oBAGP,WACI,OACI,sBAAK9B,UAAU,SAAf,UACI,cAAC,EAAD,CAAM8B,SAAUa,KAAKF,MAAMX,SAAUG,YAAa,SAAAgB,GAAC,OAAIC,QAAQC,IAAIF,MACnE,cAAC,EAAD,CAASG,SAAS,SAASd,QAASA,W,GAtClCe,IAAMC,WClBxBC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.1311ca0b.chunk.js","sourcesContent":["import \"../App.scss\"\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\n\r\ninterface ChatProps {\r\n    messages: MessageProps[],\r\n    sendHandler: SubmitHandler;\r\n}\r\n\r\nconst Chat = (props: ChatProps) => {\r\n    const messageRef = useRef<HTMLDivElement>(null)\r\n    useEffect(() => {\r\n        const ref = messageRef.current;\r\n        if (ref && ref.getBoundingClientRect().bottom <= window.innerHeight + 100) {\r\n            ref.scrollIntoView({behavior: \"smooth\"});\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"messages\">\r\n                {props.messages.map(msg => <Message author={msg.author} content={msg.content} own={msg.own}/>)}\r\n                <div ref={messageRef}/>\r\n            </div>\r\n            <InputField submitHandler={content => {\r\n                props.sendHandler(content);\r\n            }}/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\ninterface MessageProps {\r\n    author: string,\r\n    content: string,\r\n    own?: boolean\r\n}\r\n\r\nconst Message = (props: MessageProps) =>\r\n    <div className=\"message\"\r\n         style={(props.own) ? {backgroundColor: \"#37465c\"} : {}}>\r\n        <div className=\"author\">{props.author}</div>\r\n        <div className=\"content\">{props.content}</div>\r\n    </div>\r\n\r\n\r\ntype SubmitHandler = (content: string) => void\r\n\r\ninterface InputFieldProps {\r\n    submitHandler: SubmitHandler\r\n}\r\n\r\nconst InputField = (props: InputFieldProps) => {\r\n    const [content, setContent] = useState(\"\");\r\n\r\n    return (\r\n        <input onKeyPress={event => {\r\n            if (event.key === \"Enter\") {\r\n                props.submitHandler(content);\r\n                setContent(\"\");\r\n            }\r\n        }}\r\n               onChange={event => setContent(event.target.value)}\r\n               type=\"text\"\r\n               className=\"input-field\"\r\n               value={content}\r\n               placeholder=\"Type your message...\"/>\r\n    );\r\n}\r\n\r\n\r\nexport default Chat;\r\nexport type {MessageProps};","interface MembersProps {\r\n    selfName: string,\r\n    members: string[]\r\n}\r\n\r\nconst Members = (props: MembersProps) => {\r\n    return (\r\n        <div className=\"members\">\r\n            <SelfMember name=\"corsin\"/>\r\n            {props.members.map(n => <Member name={n}/>)}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ninterface MemberProps {\r\n    name: string,\r\n}\r\n\r\nconst Member = (props: MemberProps) =>\r\n    <div className=\"member\">\r\n        <div className=\"name\">{props.name}</div>\r\n    </div>\r\n\r\nconst SelfMember = (props: MemberProps) =>\r\n    <div className=\"member\" style={{backgroundColor: \"#37465c\"}}>\r\n        <div className=\"name\">\r\n            {props.name}\r\n        </div>\r\n    </div>\r\n\r\nexport default Members;\r\nexport type {MemberProps};","import React from 'react';\r\nimport Chat, {MessageProps} from \"./Chat\";\r\nimport Members from \"./Members\";\r\n\r\n\r\nlet members = [\"hugo\", \"timo nicolas angst\", \"noel\", \"schiel\", \"gebhardt\", \"rolf\", \"Michi\", \"dragon99\", \"Cyrill\", \"Joey RÃ¼egg\", \"Mark Zuckerberg\"];\r\nlet messages = [{author: \"Timo Nicolas Angst\", content: \"ich bin timo\"},\r\n    {author: \"hugo\", content: \"hallo corsin\"}, {author: \"corsin\", content: \"hallo\", own: true},\r\n    {\r\n        author: \"hugo\", content: \"hallo\\n\" +\r\n            \"        mein name ist hugo boss\\n\" +\r\n            \"        lol wenn ich hier ganz viel schreibe sollte es wrappen\\n\" +\r\n            \"        -----------------------------------------------------\"\r\n    }]\r\n\r\n\r\ninterface AppState {\r\n    name: string,\r\n    onlineMembers: string[],\r\n    messages: MessageProps[]\r\n}\r\n\r\nclass App extends React.Component<{}, AppState> {\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"corsin\",\r\n            onlineMembers: members,\r\n            messages: messages\r\n        }\r\n    }\r\n\r\n    changeMembers(members: string[]) {\r\n        this.setState({\r\n            onlineMembers: members\r\n        })\r\n    }\r\n\r\n    changeMessages(messages: MessageProps[]) {\r\n        this.setState({\r\n            messages: messages\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(() => {\r\n            members.push(\"cors\");\r\n            this.changeMembers(members);\r\n        }, 1000);\r\n        setInterval(() => {\r\n            messages.push({author: \"dragon99\", content: \"spam\"});\r\n            this.changeMessages(messages);\r\n        }, 500);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"parent\">\r\n                <Chat messages={this.state.messages} sendHandler={s => console.log(s)}/>\r\n                <Members selfName=\"corsin\" members={members}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}